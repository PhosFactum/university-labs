import numpy as np

# --- 1. –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–≥—Ä–∞—Ñ –ë, –≤–∞—Ä–∏–∞–Ω—Ç 8) ---

# –ú–∞—Ç—Ä–∏—Ü–∞ —Å–º–µ–∂–Ω–æ—Å—Ç–∏ –≥—Ä–∞—Ñ–∞ (0, –µ—Å–ª–∏ –Ω–µ—Ç –ø—É—Ç–∏)
adjacency_matrix = np.array([
    [0,  5,  9,  0,  0,  0,  0, 12],  
    [5,  0,  3,  7,  0,  0,  0,  0],  
    [9,  3,  0,  4,  8,  0,  0,  0],  
    [0,  7,  4,  0,  6,  0, 10,  0],  
    [0,  0,  8,  6,  0,  5,  0, 15],  
    [0,  0,  0,  0,  5,  0,  7,  0],  
    [0,  0,  0, 10,  0,  7,  0,  9],  
    [12, 0,  0,  0, 15,  0,  9,  0]  
])

# –í–µ—Å–∞ –≤–µ—Ä—à–∏–Ω (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ –≤ –∫–∞–∂–¥–æ–º –ø—É–Ω–∫—Ç–µ)
weights = np.array([80, 120, 120, 90, 90, 130, 70, 90]) 

# --- 2. –ü–æ–∏—Å–∫ –∫—Ä–∞—Ç—á–∞–π—à–∏—Ö –ø—É—Ç–µ–π (–§–ª–æ–π–¥-–£–æ—Ä—à–µ–ª–ª) ---

n = adjacency_matrix.shape[0]
Dij = np.where(adjacency_matrix == 0, np.inf, adjacency_matrix)  # –ó–∞–ø–æ–ª–Ω—è–µ–º "–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å—é"
np.fill_diagonal(Dij, 0)  # –î–∏–∞–≥–æ–Ω–∞–ª—å (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Å–µ–±—è) = 0

for k in range(n):
    for i in range(n):
        for j in range(n):
            Dij[i, j] = min(Dij[i, j], Dij[i, k] + Dij[k, j])

# –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
with open("results_lab3.txt", "w") as file:
    
    # --- –í—ã–≤–æ–¥ –º–∞—Ç—Ä–∏—Ü—ã –∫—Ä–∞—Ç—á–∞–π—à–∏—Ö –ø—É—Ç–µ–π ---
    file.write("–ú–∞—Ç—Ä–∏—Ü–∞ –∫—Ä–∞—Ç—á–∞–π—à–∏—Ö –ø—É—Ç–µ–π (Dij):\n")
    file.write("–°—Ç—Ä–æ–∫–∏ –∏ —Å—Ç–æ–ª–±—Ü—ã ‚Äî –Ω–æ–º–µ—Ä–∞ –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ (x1, x2, ..., x8)\n")
    file.write(str(np.round(Dij, 2)) + "\n\n")

    # --- 3. –ú–∏–Ω–∏–º–∞–∫—Å–Ω–∞—è –∑–∞–¥–∞—á–∞ (—Ü–µ–Ω—Ç—Ä –≥—Ä–∞—Ñ–∞) ---

    max_distances = Dij.max(axis=1)  # –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–µ—Ä—à–∏–Ω—ã
    minimax_index = np.argmin(max_distances)  # –í—ã–±–∏—Ä–∞–µ–º –≤–µ—Ä—à–∏–Ω—É —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∏–∑ —ç—Ç–∏—Ö –º–∞–∫—Å–∏–º—É–º–æ–≤

    file.write("üîπ –ú–∏–Ω–∏–º–∞–∫—Å–Ω–∞—è –∑–∞–¥–∞—á–∞: –ø–æ–∏—Å–∫ —Ü–µ–Ω—Ç—Ä–∞ –≥—Ä–∞—Ñ–∞ (—É–∑–ª–∞ —Ä–∞–¥–∏–æ—Å–µ—Ç–∏)\n")
    file.write("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –≤–µ—Ä—à–∏–Ω—ã:\n")
    for i, d in enumerate(max_distances):
        file.write(f"–í–µ—Ä—à–∏–Ω–∞ x{i+1}: max —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ = {d}\n")
    
    file.write(f"\n‚úÖ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —É–∑–µ–ª —Ä–∞–¥–∏–æ–¥–æ—Å—Ç—É–ø–∞ (—Ü–µ–Ω—Ç—Ä –≥—Ä–∞—Ñ–∞): x{minimax_index+1}\n\n")

    # --- 4. –ú–∏–Ω–∏—Å—É–º–º–Ω–∞—è –∑–∞–¥–∞—á–∞ (–º–µ–¥–∏–∞–Ω–∞ –≥—Ä–∞—Ñ–∞) ---

    sum_distances = (Dij * weights[:, np.newaxis]).sum(axis=1)  # –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ –≤–µ—Å –∏ —Å—É–º–º–∏—Ä—É–µ–º
    median_index = np.argmin(sum_distances)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞

    file.write("üîπ –ú–∏–Ω–∏—Å—É–º–º–Ω–∞—è –∑–∞–¥–∞—á–∞: –ø–æ–∏—Å–∫ –º–µ–¥–∏–∞–Ω—ã –≥—Ä–∞—Ñ–∞ (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —É–∑–ª–∞ –ø—Ä–æ–≤–æ–¥–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞)\n")
    file.write("–°—É–º–º—ã —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π —Å —É—á—ë—Ç–æ–º –∞–±–æ–Ω–µ–Ω—Ç–æ–≤:\n")
    for i, s in enumerate(sum_distances):
        file.write(f"–í–µ—Ä—à–∏–Ω–∞ x{i+1}: —Å—É–º–º–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π = {s}\n")

    file.write(f"\n‚úÖ –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ–≤–æ–¥–Ω–æ–≥–æ —É–∑–ª–∞: x{median_index+1}\n")

print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ñ–∞–π–ª results_lab3.txt")
